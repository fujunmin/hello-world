#! /usr/bin/python#! coding=UTF-8import sysfrom gevent import sleepreload(sys)import osBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))))sys.path.append(BASE_DIR)# print 'ffffmmmmm:',BASE_DIRimport requestsimport unittestimport jsonfrom business.riskbell.test.unittest_flv4.case.interfacev4 import LoginAPI_v4# from interfacev4 import LoginAPI_v4# subs_import_interface = LoginAPI_v4(configuration.env)class TestAddSubs(unittest.TestCase):    @classmethod    def setUpClass(cls):        cls.LoginAPI_v4 = LoginAPI_v4()    def test_add_subs(self):        print 'test_add_subs'        token = json.loads(self.LoginAPI_v4.login().content)['token']        entname = '营口市艺鑫大汽贸有限公司'        res_addSubs = self.LoginAPI_v4.add_subs(entname, token)        # expect_fields = ['keyword','sub_id','ent_name']        expect_keys = ['created', 'not_found', 'exists']        expect_inside_keys = ['keyword', 'sub_id', 'ent_name']        # print res_addSubs.status_code == 200        # print json.loads(res_addSubs.content)['created']        # print res_addSubs.content        if res_addSubs.status_code==200:            actual_res_keys = json.loads(res_addSubs.content).keys()            self.assertItemsEqual(actual_res_keys,expect_keys)            if res_addSubs.status_code == 200 and json.loads(res_addSubs.content)['created']:                created_keys = json.loads(res_addSubs.content)['created'][0].keys()                self.assertItemsEqual(created_keys, expect_inside_keys)            elif json.loads(res_addSubs.content)['exists']:                sub_id = json.loads(res_addSubs.content)['exists'][0]['sub_id']                res_remove = self.LoginAPI_v4.remove_subs(sub_id,token)                # print 'res_remove.code:',res_remove.status_code == 200                sleep(3)                if res_remove.status_code==200:                    res_add_subs2 = self.LoginAPI_v4.add_subs(entname, token)                    actual_inside_keys = json.loads(res_add_subs2.content)['created'][0].keys()                    self.assertItemsEqual(actual_inside_keys, expect_inside_keys)if __name__=='__main__':    unittest.main(verbosity=2)    # test_suit = unittest.TestSuite()    # test_suit.addTest(Login('test_login'))