#! /usr/bin/python#! coding=UTF-8import sysreload(sys)import osBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))))sys.path.append(BASE_DIR)import requestsfrom business.riskbell.test.unittest_flv4.case.config.configuration import envfrom base.Config import riskbell_interface_envs, riskbell_login_user# obj = LoginAPI_v4('stagv4')import unittestimport jsonfrom business.riskbell.test.unittest_flv4.case.config import configurationfrom business.riskbell.test.unittest_flv4.case.interfacev4 import LoginAPI_v4# subs_import_interface = LoginAPI_v4(configuration.env)class TestSubsList(unittest.TestCase):    @classmethod    def setUpClass(cls):        cls.LoginAPI_v4 = LoginAPI_v4()    def setUp(self):        print 'setupmin'    # 默认入参：count:true;per_page:10;page:1;sort:-created_at    def test_subs_list1(self):        print 'run test_subs_list1'        token = json.loads(self.LoginAPI_v4.login().content)['token']        res_subsList = self.LoginAPI_v4.subs_list(token)        expect_fields = ['keyword','sub_id','user_id','stop_sub_time','created_at','updated_at','status','ent_name']        self.assertEqual(res_subsList.status_code, 200)        if json.loads(res_subsList.content):            actual_res_keys = json.loads(res_subsList.content)[0].keys()            self.assertItemsEqual(actual_res_keys,expect_fields)            # self.assertListEqual(actual_res_keys,expect_fields)            self.assertIn('X-Total-Count',res_subsList.headers.keys())            if res_subsList.headers['X-Total-Count'] >=10:                self.assertEqual(len(json.loads(res_subsList.content)),10)            if res_subsList.headers['X-Total-Count'] >=2:                time1 = json.loads(res_subsList.content)[0]['created_at']                time2 = json.loads(res_subsList.content)[1]['created_at']                self.assertGreaterEqual(time1,time2)    #count：false    def test_subs_list2(self):        print 'run test_subs_list2'        token = json.loads(self.LoginAPI_v4.login().content)['token']        res_subsList = self.LoginAPI_v4.subs_list(token,count='false')        expect_fields = ['keyword', 'sub_id', 'user_id', 'stop_sub_time', 'created_at', 'updated_at', 'status','ent_name']        self.assertEqual(res_subsList.status_code, 200)        if json.loads(res_subsList.content):            self.assertNotIn('X-Total-Count',res_subsList.headers.keys())    # sort：created    def test_subs_list3(self):        print 'run test_subs_list3'        token = json.loads(self.LoginAPI_v4.login().content)['token']        res_subsList = self.LoginAPI_v4.subs_list(token, sort='created_at')        expect_fields = ['keyword', 'sub_id', 'user_id', 'stop_sub_time', 'created_at', 'updated_at', 'status',                         'ent_name']        self.assertEqual(res_subsList.status_code, 200)        if json.loads(res_subsList.content):            if res_subsList.headers['X-Total-Count'] >=2:                time1 = json.loads(res_subsList.content)[0]['created_at']                time2 = json.loads(res_subsList.content)[1]['created_at']                self.assertLessEqual(time1,time2)    # page=total/per_page+1    def test_subs_list4(self):        token = json.loads(self.LoginAPI_v4.login().content)['token']        res_subsList = self.LoginAPI_v4.subs_list(token)        self.assertEqual(res_subsList.status_code, 200)        if json.loads(res_subsList.content):            total = int(res_subsList.headers['X-Total-Count'])            if 10>total>=0:                self.assertEqual(len(json.loads(res_subsList.content)),total)            if total>10 and (total%10!=0):                integer = total/10                remainder = total%10                res_subsList = self.LoginAPI_v4.subs_list(token, page=integer+1)                self.assertEqual(len(json.loads(res_subsList.content)),remainder)            if total>10 and (total%10==0):                integer = total / 10                res_subsList = self.LoginAPI_v4.subs_list(token, page=integer)                self.assertEqual(len(json.loads(res_subsList.content)),10)if __name__=='__main__':    unittest.main(verbosity=2)    # test_suit = unittest.TestSuite()    # test_suit.addTest(Login('test_login'))