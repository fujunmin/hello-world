#! /usr/bin/python#! coding=UTF-8import sysreload(sys)import osBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))))sys.path.append(BASE_DIR)import requestsfrom business.riskbell.test.unittest_flv4.case.config.configuration import envfrom base.Config import riskbell_interface_envs, riskbell_login_user# obj = LoginAPI_v4('stagv4')import unittestimport jsonfrom business.riskbell.test.unittest_flv4.case.config import configurationfrom business.riskbell.test.unittest_flv4.case.interfacev4 import LoginAPI_v4# subs_import_interface = LoginAPI_v4(configuration.env)class TestSubsDetail(unittest.TestCase):    @classmethod    def setUpClass(cls):        cls.LoginAPI_v4 = LoginAPI_v4()    # 默认入参：count:true;per_page:10;page:1;sort:-created_at    def test_sub_detail1(self):        print 'run test_sub_detail1 '        token = json.loads(self.LoginAPI_v4.login().content)['token']        res_subsList = self.LoginAPI_v4.subs_list(token)        self.assertEqual(res_subsList.status_code,200)        self.assertIsNotNone(res_subsList.content)        sub_id = json.loads(res_subsList.content)[0]['sub_id']        res_sub_detail = self.LoginAPI_v4.sub_detail(sub_id,token)        expect_fields = ['keyword','sub_id','user_id','stop_sub_time','created_at','updated_at','status','ent_name']        self.assertEqual(res_sub_detail.status_code, 200)        if json.loads(res_sub_detail.content):            actual_res_keys = json.loads(res_sub_detail.content).keys()            self.assertItemsEqual(actual_res_keys,expect_fields)    #    def test_sub_detail2(self):        print 'run test_sub_detail2'        token = json.loads(self.LoginAPI_v4.login().content)['token']        sub_id = '012345678'        res_sub_detail = self.LoginAPI_v4.sub_detail(sub_id,token=token)        expect_fields = ['code','message']        self.assertEqual(res_sub_detail.status_code, 400)        if json.loads(res_sub_detail.content):            actual_res_keys = json.loads(res_sub_detail.content).keys()            self.assertItemsEqual(actual_res_keys,expect_fields)            self.assertEqual(json.loads(res_sub_detail.content)['code'],701)            self.assertEqual(json.loads(res_sub_detail.content)['message'],u'错误的请求数据')if __name__=='__main__':    unittest.main(verbosity=2)    # test_suit = unittest.TestSuite()    # test_suit.addTest(Login('test_login'))