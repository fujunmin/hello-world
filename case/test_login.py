#! /usr/bin/python#! coding=UTF-8import osimport sysBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))))sys.path.append(BASE_DIR)reload(sys)# sys.setdefaultencoding('utf-8')# BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))import json# import business.riskbell.test.unittest_flv4.case.config.configuration as configurationimport unittest# from business.riskbell.test.unittest_flv4.case.interfacev4 import LoginAPI_v4from interfacev4 import LoginAPI_v4obj = LoginAPI_v4()class TestLogin(unittest.TestCase):    @classmethod    def setUpClass(cls):        # cls.base_url=riskbell_interface_envs[cls.env]        cls.LoginAPI_v4 = LoginAPI_v4()    def test_login_matched(self):        print 'run test_login_matched'        username = '36369405'        password = 'fujunmin'        res = obj.login(username,password)        self.assertEqual(res.status_code,200)        self.assertIn('token',json.loads(res.content).keys())    def test_login_nomatched(self):        print 'run test_login_nomatched'        username = '3636940511'        password = 'aa'        res = obj.login(username,password)        self.assertEqual(res.status_code,401)        self.assertEqual(json.loads(res.content)['code'],733,'接口返回码不是733')        self.assertIn('message',json.loads(res.content).keys())        self.assertEqual(json.loads(res.content)['message'],u'UID与签名不匹配')    def test_login_empty(self):        print 'run test_login_empty'        username = '3636940511'        password = ''        res = obj.login(username,password)        self.assertEqual(res.status_code,400)        self.assertEqual(json.loads(res.content)['code'],701,'接口返回码不是701')        self.assertEqual(json.loads(res.content)['message'],u'错误的请求数据')# 记住以下三句话，即会运行case了def suite2():    suite = unittest.TestSuite()    # 执行一条用例    # suite.addTest(TestLogin("test_login_matched"))    #执行多个用例    # tests = [TestLogin("test_login_matched"), TestLogin("test_login_nomatched")]    # suite.addTests(tests)    # unittest.TextTestRunner(verbosity=2).run(suite)    # map方式收集用例    tests = ['test_login_matched', 'test_login_nomatched']    return unittest.TestSuite(map(TestLogin, tests))    # unittest.TextTestRunner(verbosity=2).run(suite)def suite1():    suite = unittest.TestSuite()    # suite.addTest(TestLogin('test_login_matched'))    # suite.addTest(TestLogin('test_login_nomatched'))    # return suite    tests = ['test_login_matched', 'test_login_nomatched']    return unittest.TestSuite(map(TestLogin, tests))if __name__=='__main__':    #没有顺序的执行所有以test开头的case    # unittest.main()    unittest.main(exit = False,verbosity=2)#它是全局方法，把它屏蔽后，不在suite的用例就不会跑，exit = False表示中间有用例失败也继续执行；还有比较常用的verbosity=2，表示显示def名字    # aa = suite()    # suite = unittest.TestLoader().loadTestsFromTestCase(TestLogin)    # unittest.TextTestRunner(verbosity=2).run(suite)    # suite()    # test_suite = unittest.TestSuite()    # test_suite.addTest(TestLogin('test_login'))    # runner = unittest.TextTestRunner()    # runner.run(test_suite)    #    # suite = unittest.TestSuite()    # # tests = [TestLogin("test_login"), TestLogin("test_subs"),TestLogin("order_es")]    # tests = [TestLogin("test_*")]    # suite.addTests(tests)    # runner = unittest.TextTestRunner(verbosity=2)    # runner.run(suite)    # 执行一条用例    # suite = unittest.TestSuite()    # suite.addTest(TestLogin("test_login_matched"))    # unittest.TextTestRunner(verbosity=2).run(suite)    # 执行多个用例，有顺序执行    # suite = unittest.TestSuite()    # tests = [TestLogin("test_login_matched"), TestLogin("test_login_nomatched")]    # suite.addTests(tests)    # unittest.TextTestRunner(verbosity=2).run(suite)    # 执行多个用例,不常用    # tests = ['test_login_matched', 'test_login_nomatched']    # suite = unittest.TestSuite(map(TestLogin, tests))    # unittest.TextTestRunner(verbosity=2).run(suite)    #执行整个类里面所有的用例，无顺序    # unittest.main(exit = False,verbosity=2)#它是全局方法，把它屏蔽后，不在suite的用例就不会跑，exit = False表示中间有用例失败也继续执行；还有比较常用的verbosity=2，表示显示def名字    #执行整个类里面所有的用例，无顺序    # suite = unittest.TestLoader().loadTestsFromTestCase(TestLogin)    # unittest.TextTestRunner(verbosity=2).run(suite)    # 执行整个类里面所有的用例，无顺序    # suite = unittest.TestSuite([TestLogin])    # unittest.TextTestRunner(verbosity=2).run(suite)    # 此用法可以同时测试多个类    # suite1 = unittest.TestLoader().loadTestsFromTestCase(TestCase1)    # suite2 = unittest.TestLoader().loadTestsFromTestCase(TestCase2)    # suite = unittest.TestSuite([suite1, suite2])    # unittest.TextTestRunner(verbosity=2).run(suite)    pass    # # 测试2    # test_cases = (TestLogin, TestCase2, TestCase3)    # def load_tests(loader, tests, pattern):    #     suite = TestSuite()    #     for test_class in test_cases:    #         tests = loader.loadTestsFromTestCase(test_class)    #         suite.addTests(tests)    #     return suite